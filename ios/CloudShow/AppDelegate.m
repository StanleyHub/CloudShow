/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"

#import "RCTRootView.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  NSURL *jsCodeLocation;

  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */

  jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];

  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by the "Bundle React Native code and images" build step when
   * running the project on an actual device or running the project on the
   * simulator in the "Release" build configuration.
   */

//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];

  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@"CloudShow"
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  return YES;
}


- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
  
  // Copy the file into the documents directory, renaming if there's a duplicate
  [self copyItemAtURLtoDocumentsDirectory:url];
  
  return YES;
}

-(BOOL)copyItemAtURLtoDocumentsDirectory:(NSURL*)url {
  
  NSError *error;
  NSURL *copyToURL =  [self applicationDocumentsDirectory];
  
  NSString *fileName = [url lastPathComponent];
  
  // Add requested file name to path
  copyToURL = [copyToURL URLByAppendingPathComponent:fileName isDirectory:NO];
  
  if ([[NSFileManager defaultManager] fileExistsAtPath:copyToURL.path]) {
    
    // Duplicate path
    NSURL *duplicateURL = copyToURL;
    // Remove the filename extension
    copyToURL = [copyToURL URLByDeletingPathExtension];
    // Filename no extension
    NSString *fileNameWithoutExtension = [copyToURL lastPathComponent];
    // File extension
    NSString *fileExtension = [url pathExtension];
    
    int i=1;
    while ([[NSFileManager defaultManager] fileExistsAtPath:duplicateURL.path]) {
      
      // Delete the last path component
      copyToURL = [copyToURL URLByDeletingLastPathComponent];
      // Update URL with new name
      copyToURL=[copyToURL URLByAppendingPathComponent:[NSString stringWithFormat:@"%@â€“%i",fileNameWithoutExtension,i]];
      // Add back the file extension
      copyToURL =[copyToURL URLByAppendingPathExtension:fileExtension];
      // Copy path to duplicate
      duplicateURL = copyToURL;
      i++;
      
    }
    
    
  }
  
  BOOL ok = [[NSFileManager defaultManager] moveItemAtURL:url toURL:copyToURL error:&error];
  
  // Feed back any errors
  if (error) {
    NSLog(@"%@",[error localizedDescription]);
  }
  
  return ok;
}

-(NSURL *)applicationDocumentsDirectory {
  
  NSString *documentsDirectory;
  NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
  if ([paths count] > 0) {
    documentsDirectory = [paths objectAtIndex:0];
  }
  // Important that we use fileURLWithPath and not URLWithString (see NSURL class reference, Apple Developer Site)
  return [NSURL fileURLWithPath:documentsDirectory];
}

@end
